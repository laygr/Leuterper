class SimpleMatrix[X]
{
	List[X] m;
	Number rows;
	Number columns;

	SimpleMatrix(Number rows, Number columns)
	{
		this.m = new List[X](rows * columns);
		this.rows = rows;
		this.columns = columns;
		return this;
	}

	Void set(Number row, Number column, X value)
	{
		return this.m.set(this.indexForRowIndex(row, column) , value);
	}

	X get(Number row, Number column)
	{
		return this.m.get(this.indexForRowIndex(row, column));
	}

	Number indexForRowIndex(Number row, Number column)
	{
		return (row * this.columns) + column;
	}
}

class SimpleMatrixNumber inherits SimpleMatrix[Number]
{
	SimpleMatrixNumber(Number rows, Number columns) : (rows, columns)
	{
		return this;
	}

	Void *(Number n)
	{
		Number i = 0;
		while i < this.m.count()
		{
			Number v = this.m.get(i);
			this.m.set(i, v * n);
			i += 1;
		}
		return null;
	}

	SimpleMatrixNumber *(SimpleMatrixNumber other)
	{
        if this.rows == 0 {
            error("No se puede multiplicar una matriz vacia");
        }
        if this.columns != other.rows
        {
        	error("Estas matrices no son multiplicables.");
        }

        SimpleMatrixNumber result = new SimpleMatrixNumber(this.rows, other.columns);

        Number i = 0;
        while ( i < this.rows )
        {
            Number j = new Number(0);
            while( j < other.columns)
            {
            	Number acum = new Number(0);
            	Number k = new Number(0);
            	while( k < this.columns)
                {
                  	Number v1 = this.get(i, k);
                   	Number v2 = other.get(k, j);
                   	acum += (v1 * v2);
                    k += 1;
                }
                result.set(i, j, acum);
                j += 1;
            }
            i += 1;
        }
        return result;
	}

}


Void main(String arg)
{
	
	SimpleMatrixNumber m = new SimpleMatrixNumber(3, 3);
	m.set(0, 0, 0);
	m.set(0, 1, 1);
	m.set(0, 2, 2);

	m.set(1, 0, 3);
	m.set(1, 1, 4);
	m.set(1, 2, 5);

	m.set(2, 0, 6);
	m.set(2, 1, 7);
	m.set(2, 2, 8);

	m  * 2;

	write(m.m.toString());

	SimpleMatrixNumber m2 = new SimpleMatrixNumber(3, 3);
	m2.set(0, 0, 0);
	m2.set(0, 1, 1);
	m2.set(0, 2, 2);

	m2.set(1, 0, 3);
	m2.set(1, 1, 4);
	m2.set(1, 2, 5);

	m2.set(2, 0, 6);
	m2.set(2, 1, 7);
	m2.set(2, 2, 8);

	write(m.get(1, 2).toString());

	SimpleMatrixNumber m3 = m * m2;

	write(m3.m.toString());

	return null;
}
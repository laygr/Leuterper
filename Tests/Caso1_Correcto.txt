class Matrix[X] inherits List[List[X]]
{
	Matrix() {
		return this;
	}

	X get(Number row, Number column)
	{
		return this.get(row).get(column);
	}

	Void set(Number row, Number column, X element)
	{
		this.get(row).set(column, element);
	}
}

class AA
{
	Number a;
	AA()
	{
		Number a = a + 1;
	}
}

class BB inherits AA
{
	Number b;
	BB()
	{

	}
}

class CC inherits BB
{
	Number c;
	CC()
	{

	}
}

class Range
{
	Number inferior;
	Number superior;

	Range(Number inferior, Number superior)
	{
		this.inferior = inferior;
		this.superior = superior;
	}
}

class Array[X]
{
	List[Range] ranges;
	List[X] elements;
	List[Number] ms;
	Number dimensions;
	Number total;

	Array(List[Range] rangos)
	{
		this.dimensions = rangos.count();
		this.ms = new List[Number](this.dimensions + 1);
		this.prepare();
		this.elements = new List[X](total);
	}

	X get(List[Number] indexes)
	{
		Number index = this.getIndexForIndexes(indexes);
		return this.elements.get(index);

	}
	Void set(List[Number] indexes, X element)
	{
		Number index = this.getIndexForIndexes(indexes);
		this.elements.set(index, element);
	}

	Number getIndexForIndexes(List[Number] indexes)
	{
		Number index = 0;
		Number i = 0;
		while i < this.dimensions
		{
			index += ( indexes.get(i) * this.ms.get(i+1) );
			i += 1;
		}
		return index;
	}

	Void prepare()
	{
		Number i = 0;
		Number total = 1;
		Range range;
		Number rangeSize;
		while i < this.dimensions
		{
			range = this.ranges.get(i);
			rangeSize = range.superior - range.inferior + 1;
			total *= rangeSize;
			i += 1;
		}
		this.ms.set(0, total);
		i = 1;
		while i < this.dimensions
		{
			range = this.ranges.get(i-1);
			rangeSize = range.superior - range.inferior + 1;
			this.ms.set(i, this.ms.get(i-1) / rangeSize);
			i += 1;
		}
		
		Number k = 0;
		i = 0;
		while i < this.dimensions
		{
			k += ( this.ms.get(i+1) * this.ranges.get(i).inferior);
			i += 1;
		}
		this.ms.set(this.dimensions, k);
	}
}

Number fib(Number n)
{
	if n == 0 { return 0; }
	if n < 3
	{
		return 1;
	}
	else
	{
		return fib(n - 1) + fib(n - 2);
	}
}

Void main(String arg)
{
	Matrix[Number] m = new Matrix[Number]();
	List[Number] row1 = {1, 2, 3} : Number;
	List[Number] row2 = {4, 5, 6} : Number;
	List[Number] row3 = {7, 8, 9} : Number;

	m.add(row1);
	m.add(row2);
	m.add(row3);

	write(fib(100).toString());
}
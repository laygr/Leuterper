/* Generated By: CSCC: 4.0 (03/25/2012)  Do not edit this line. TheParser.cs */
  using System;
  using System.IO;
  using System.Collections.Generic;
  using Leuterper;
  using Leuterper.Constructions;
  using Leuterper.Exceptions;

  // A few nested classes to make things simpler
  class TheParser : TheParserConstants {

  public Program parse_Program() {
        List<LClass> classes = new List<LClass>();
        List<Function> functions = new List<Function>();
        List<IAction> actions = new List<IAction>();
    parse_Classes(classes);
    parse_Functions(functions);
    parse_IActions(actions);
          {if (true) return new Program(classes, functions, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_Classes(List<LClass> classes) {
        LClass aClass;
    while (true) {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        goto label_1;break;
        
      }
      aClass = parse_Class();
                                         classes.Add(aClass);
    }
    label_1: ;
    
  }

  public void parse_Functions(List<Function> functions) {
        Function f;
    f = parse_Function();
                               functions.Add(f);
  }

  public Function parse_Function() {
        LType type;
        Token id;
        List<Parameter> parameters = new List<Parameter>();
        List<IAction> actions = new List<IAction>();
    type = parse_LType();
    id = parse_SID();
    jj_consume_token(LP);
    parse_Parameters(parameters);
    jj_consume_token(RP);
    jj_consume_token(LC);
    parse_IActions(actions);
    jj_consume_token(RC);
          {if (true) return new Function(id.beginLine, type, id.image, parameters, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public LClass parse_Class() {
        LType type;
        LType declarationInheritance = null;
        List<LAttribute> LAttributesDeclarations = new List<LAttribute>();
        List<Class_Procedure> classProcedures = new List<Class_Procedure>();
        Token c;
    c = jj_consume_token(CLASS);
    type = parse_LType();
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case INH:
      declarationInheritance = parse_Inheritance();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;break;
      
    }
    jj_consume_token(LC);
    parse_LAttributes(LAttributesDeclarations);
    parse_Class_Procedures(classProcedures);
    jj_consume_token(RC);
          {if (true) return new LClass(c.beginLine, type, declarationInheritance, LAttributesDeclarations, classProcedures);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_Class_Procedures(List<Class_Procedure> classProcedures) {
        Class_Procedure classProcedure;
    while (true) {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case BID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        goto label_2;break;
        
      }
      if (jj_2_1(2147483647)) {
        classProcedure = parse_Method();
                                                  classProcedures.Add(classProcedure);
      } else {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case BID:
          classProcedure = parse_Constructor();
                                                       classProcedures.Add(classProcedure);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();break;
          
        }
      }
    }
    label_2: ;
    
  }

  public Constructor parse_Constructor() {
        Token id;
        List<Parameter> parameters = new List<Parameter>();
        List<Expression> baseCallArguments = new List<Expression>();
        List<IAction> actions = new List<IAction>();
    id = parse_BID();
    jj_consume_token(LP);
    parse_Parameters(parameters);
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case C:
      jj_consume_token(C);
      jj_consume_token(LP);
      parse_Arguments(baseCallArguments);
      jj_consume_token(RP);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;break;
      
    }
    jj_consume_token(LC);
    parse_IActions(actions);
    jj_consume_token(RC);
          {if (true) return new Constructor(id.beginLine, id.image, parameters, baseCallArguments, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public Method parse_Method() {
        LType type = null;
        Token id;
        List<Parameter> parameters = new List<Parameter>();
        List<IAction> actions = new List<IAction>();
    type = parse_LType();
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case SID:
      id = parse_SID();
      break;
    case SYMBOLS:
      id = jj_consume_token(SYMBOLS);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();break;
      
    }
    jj_consume_token(LP);
    parse_Parameters(parameters);
    jj_consume_token(RP);
    jj_consume_token(LC);
    parse_IActions(actions);
    jj_consume_token(RC);
          {if (true) return new Method(id.beginLine, type, id.image, parameters, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public LType parse_Inheritance() {
        LType type;
        Token inh;
    inh = jj_consume_token(INH);
    type = parse_LType();
          {if (true) return type;}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_LAttributes(List<LAttribute> LAttributesDeclarations) {
        LAttribute LAttributeDeclaration;
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        goto label_3;
      }
      LAttributeDeclaration = parse_LAttribute();
                                                             LAttributesDeclarations.Add(LAttributeDeclaration);
    }
    label_3: ;
    
  }

  public LAttribute parse_LAttribute() {
        LType type;
        Token id;
        Expression expression;
    type = parse_LType();
    id = parse_SID();
    jj_consume_token(SC);
          {if (true) return new LAttribute(id.beginLine, type, id.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public Var parse_Var() {
        LType type;
        Token id;
        Expression expression;
    type = parse_LType();
    id = parse_SID();
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case ASS:
      jj_consume_token(ASS);
      expression = parse_Expression();
      jj_consume_token(SC);
                  {if (true) return new Var(id.beginLine, type, id.image, expression);}
      break;
    case SC:
      jj_consume_token(SC);
                  {if (true) return new Var(id.beginLine, type, id.image);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();break;
      
    }
    throw new System.Exception("Missing return statement in function");
  }

  public Token parse_BID() {
        Token id;
    id = jj_consume_token(BID);
                {if (true) return id;}
    throw new System.Exception("Missing return statement in function");
  }

  public Token parse_SID() {
        Token id;
    id = jj_consume_token(SID);
                {if (true) return id;}
    throw new System.Exception("Missing return statement in function");
  }

  public Assignment parse_Assignment() {
        VarAccess lhs;
        Expression rhs;
        Token ass;
    lhs = parse_VarAccess();
    ass = jj_consume_token(ASS);
    rhs = parse_Expression();
          {if (true) return new Assignment(ass.beginLine, lhs, rhs);}
    throw new System.Exception("Missing return statement in function");
  }

  public IAction parse_IAction() {
        IAction action;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case BID:
      action = parse_Var();
      jj_consume_token(SC);
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_3(2147483647)) {
        action = parse_LSet();
        jj_consume_token(SC);
      } else if (jj_2_4(2147483647)) {
        action = parse_Assignment();
        jj_consume_token(SC);
      } else {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case LP:
        case LB:
        case NULL:
        case NEW:
        case BOOL:
        case NUMBER:
        case SID:
        case S:
        case CHAR:
        case STRING:
          action = parse_Expression();
          jj_consume_token(SC);
          break;
        case DO:
        case IF:
        case WHILE:
          action = parse_Conditional();
          break;
        case RTN:
          action = parse_Return_From_Block();
          jj_consume_token(SC);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();break;
          
        }
      }break;
    }
          {if (true) return action;}
    throw new System.Exception("Missing return statement in function");
  }

  public Return_From_Block parse_Return_From_Block() {
        Expression returningExpression;
        Token rin;
    rin = jj_consume_token(RTN);
    returningExpression = parse_Expression();
          {if (true) return new Return_From_Block(rin.beginLine, returningExpression);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_Arguments(List<Expression> arguments) {
        Expression expression;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case LP:
    case LB:
    case NULL:
    case NEW:
    case BOOL:
    case NUMBER:
    case SID:
    case S:
    case CHAR:
    case STRING:
      expression = parse_Expression();
                                                  arguments.Add(expression);
      while (true) {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          goto label_4;break;
          
        }
        jj_consume_token(COMMA);
        expression = parse_Expression();
                                                          arguments.Add(expression);
      }
      label_4: ;
      
      break;
    default:
      jj_la1[10] = jj_gen;
      ;break;
      
    }
  }

  public Expression parse_Expression() {
        Expression result;
    if (jj_2_5(2147483647)) {
      result = parse_CExpression();
    } else {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case LP:
      case LB:
      case NULL:
      case NEW:
      case BOOL:
      case NUMBER:
      case SID:
      case S:
      case CHAR:
      case STRING:
        result = parse_GExpression();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();break;
        
      }
    }
          {if (true) return result;}
    throw new System.Exception("Missing return statement in function");
  }

  public Expression parse_GExpression() {
        Expression expression;
    if (jj_2_6(2147483647)) {
      expression = parse_Call_Function();
    } else {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case NEW:
        expression = parse_Call_Constructor();
        break;
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_7(2147483647)) {
          expression = parse_Term();
        } else {
          switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
          case LP:
            jj_consume_token(LP);
            expression = parse_Expression();
            jj_consume_token(RP);
            break;
          case NULL:
            expression = parse_Null();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();break;
            
          }
        }break;
      }
    }
          {if (true) return expression;}
    throw new System.Exception("Missing return statement in function");
  }

  public Expression parse_CExpression() {
        Expression ground;
    ground = parse_GExpression();
    while (true) {
      if (jj_2_8(2147483647)) {
        ground = parse_Call_Method(ground);
      } else {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case DOT:
          ground = parse_LAttributeAccess(ground);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();break;
          
        }
      }
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case DOT:
      case SYMBOLS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        goto label_5;break;
        
      }
    }
    label_5: ;
    
          {if (true) return ground;}
    throw new System.Exception("Missing return statement in function");
  }

  public LAttributeAccess parse_AAExpression() {
        Expression ground;
    ground = parse_GExpression();
    while (true) {
      if (jj_2_9(2147483647)) {
        ground = parse_Call_Method(ground);
        ground = parse_LAttributeAccess(ground);
      } else {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case DOT:
          ground = parse_LAttributeAccess(ground);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();break;
          
        }
      }
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case DOT:
      case SYMBOLS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        goto label_6;break;
        
      }
    }
    label_6: ;
    
          {if (true) return (LAttributeAccess) ground;}
    throw new System.Exception("Missing return statement in function");
  }

  public LSet parse_LSet() {
        LAttributeAccess lhs;
        Expression rhs;
    lhs = parse_AAExpression();
    jj_consume_token(ASS);
    rhs = parse_Expression();
          {if (true) return new LSet(lhs.getLine(), lhs, rhs);}
    throw new System.Exception("Missing return statement in function");
  }

  public LAttributeAccess parse_LAttributeAccess(Expression theObject) {
        Token LAttributeName;
    jj_consume_token(DOT);
    LAttributeName = parse_SID();
                                        {if (true) return new LAttributeAccess(LAttributeName.beginLine, theObject, LAttributeName.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public Call_Function parse_Call_Function() {
        Token id;
        List<Expression> arguments = new List<Expression>();
    id = parse_SID();
    jj_consume_token(LP);
    parse_Arguments(arguments);
    jj_consume_token(RP);
          {if (true) return new Call_Function(id.beginLine, id.image, arguments);}
    throw new System.Exception("Missing return statement in function");
  }

  public Call_Method parse_Call_Method(Expression theObject) {
        Token methodId;
        List<Expression> arguments = new List<Expression>();
        Expression expression;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      methodId = parse_SID();
      jj_consume_token(LP);
      parse_Arguments(arguments);
      jj_consume_token(RP);
      break;
    case SYMBOLS:
      methodId = jj_consume_token(SYMBOLS);
      expression = parse_Expression();
                                                          arguments.Add(expression);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();break;
      
    }
          {if (true) return new Call_Method(methodId.beginLine, theObject, methodId.image, arguments);}
    throw new System.Exception("Missing return statement in function");
  }

  public Term parse_Term() {
        Term term;
    if (jj_2_10(2147483647)) {
      term = parse_VarAccess();
    } else {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case LB:
      case BOOL:
      case NUMBER:
      case S:
      case CHAR:
      case STRING:
        term = parse_LObject();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();break;
        
      }
    }
          {if (true) return term;}
    throw new System.Exception("Missing return statement in function");
  }

  public VarAccess parse_VarAccess() {
        Token id;
    id = parse_SID();
                           {if (true) return new VarAccess(id.beginLine, id.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public Call_Constructor parse_Call_Constructor() {
        LType type;
        List<Expression> arguments = new List<Expression>();
    jj_consume_token(NEW);
    type = parse_LType();
    jj_consume_token(LP);
    parse_Arguments(arguments);
    jj_consume_token(RP);
          {if (true) return new Call_Constructor(type.getLine(), type, arguments);}
    throw new System.Exception("Missing return statement in function");
  }

  public LObject parse_LObject() {
        LObject theObject;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case NUMBER:
    case S:
      theObject = parse_LNumber();
      break;
    case STRING:
      theObject = parse_LString();
      break;
    case CHAR:
      theObject = parse_LChar();
      break;
    case LB:
      theObject = parse_LList();
      break;
    case BOOL:
      theObject = parse_LBoolean();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();break;
      
    }
          {if (true) return theObject;}
    throw new System.Exception("Missing return statement in function");
  }

  public LNumber parse_LNumber() {
        Token theNumber;
        Token sign = null;
    if (jj_2_11(2147483647)) {
      sign = jj_consume_token(S);
    } else {
      ;
    }
    theNumber = jj_consume_token(NUMBER);
                               {if (true) return new LNumber(theNumber.beginLine, sign, theNumber.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public LChar parse_LChar() {
        Token aChar;
    aChar = jj_consume_token(CHAR);
                         {if (true) return new LChar(aChar.beginLine, aChar.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public LString parse_LString() {
        Token aString;
    aString = jj_consume_token(STRING);
                             {if (true) return new LString(aString.beginLine, aString.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public LBoolean parse_LBoolean() {
        Token boolean;
    boolean = jj_consume_token(BOOL);
                           {if (true) return new LBoolean(boolean.beginLine, boolean.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public LList parse_LList() {
        LType type;
        List<Expression> elements = new List<Expression>() ;
        Token lb;
    lb = jj_consume_token(LB);
    parse_Arguments(elements);
    jj_consume_token(RB);
    jj_consume_token(C);
    type = parse_LType();
          {if (true) return new LList(lb.beginLine, type, elements);}
    throw new System.Exception("Missing return statement in function");
  }

  public Loop_Do_While parse_Loop_Do_While() {
        List<IAction> actions = new List<IAction>();
        Expression expression;
        Token ldo;
    ldo = jj_consume_token(DO);
    jj_consume_token(LC);
    parse_IActions(actions);
    jj_consume_token(RC);
    jj_consume_token(WHILE);
    expression = parse_Expression();
    jj_consume_token(SC);
          {if (true) return new Loop_Do_While(ldo.beginLine, expression, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_IActions(List<IAction> actions) {
        IAction action;
    while (true) {
      switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
      case LP:
      case LB:
      case DO:
      case IF:
      case NULL:
      case NEW:
      case RTN:
      case WHILE:
      case BOOL:
      case NUMBER:
      case BID:
      case SID:
      case S:
      case CHAR:
      case STRING:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        goto label_7;break;
        
      }
      action = parse_IAction();
                                           actions.Add(action);
    }
    label_7: ;
    
  }

  public Loop_While parse_Loop_While() {
        Expression expression;
        List<IAction> actions = new List<IAction>();
        Token lwhile;
    lwhile = jj_consume_token(WHILE);
    expression = parse_Expression();
    jj_consume_token(LC);
    parse_IActions(actions);
    jj_consume_token(RC);
          {if (true) return new Loop_While(lwhile.beginLine, expression, actions);}
    throw new System.Exception("Missing return statement in function");
  }

  public Conditional parse_Conditional() {
        Conditional conditional;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case IF:
      conditional = parse_If_Then_Else();
      break;
    case WHILE:
      conditional = parse_Loop_While();
      break;
    case DO:
      conditional = parse_Loop_Do_While();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();break;
      
    }
          {if (true) return conditional;}
    throw new System.Exception("Missing return statement in function");
  }

  public If_Then_Else parse_If_Then_Else() {
        Expression expression;
        List<IAction> thenIActions = new List<IAction>();
        List<IAction> elseIActions = new List<IAction>();
        Token lif;
    lif = jj_consume_token(IF);
    expression = parse_Expression();
    jj_consume_token(LC);
    parse_IActions(thenIActions);
    jj_consume_token(RC);
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LC);
      parse_IActions(elseIActions);
      jj_consume_token(RC);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;break;
      
    }
          {if (true) return new If_Then_Else(lif.beginLine, expression, thenIActions, elseIActions);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_Parameters(List<Parameter> parameters) {
        Parameter parameter;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case BID:
      parameter = parse_Parameter();
                                                parameters.Add(parameter);
      while (true) {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          goto label_8;break;
          
        }
        jj_consume_token(COMMA);
        parameter = parse_Parameter();
                                                        parameters.Add(parameter);
      }
      label_8: ;
      
      break;
    default:
      jj_la1[25] = jj_gen;
      ;break;
      
    }
  }

  public LVoid parse_Null() {
        Token lnull;
    lnull = jj_consume_token(NULL);
                         {if (true) return new LVoid(lnull.beginLine);}
    throw new System.Exception("Missing return statement in function");
  }

  public Parameter parse_Parameter() {
        LType type;
        Token id;
    type = parse_LType();
    id = parse_SID();
          {if (true) return new Parameter(id.beginLine, type, id.image);}
    throw new System.Exception("Missing return statement in function");
  }

  public LType parse_LType() {
        Token id;
        List<LType> typeVariables = new List<LType>();
    id = parse_BID();
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      parse_LTypes(typeVariables);
      jj_consume_token(RB);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;break;
      
    }
          {if (true) return new LType(id.beginLine, id.image, typeVariables);}
    throw new System.Exception("Missing return statement in function");
  }

  public void parse_LTypes(List<LType> types) {
        LType type;
    switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
    case BID:
      type = parse_LType();
                                       types.Add(type);
      while (true) {
        switch ((jj_ntk==-1)?jj_init_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          goto label_9;break;
          
        }
        jj_consume_token(COMMA);
        type = parse_LType();
                                               types.Add(type);
      }
      label_9: ;
      
      break;
    default:
      jj_la1[28] = jj_gen;
      ;break;
      
    }
  }

  private bool jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private bool jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private bool jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private bool jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private bool jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private bool jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private bool jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private bool jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private bool jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private bool jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private bool jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private bool jj_3R_46() {
    if (jj_3R_57()) return true;
    return false;
  }

  private bool jj_3R_11() {
    if (jj_3R_19()) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_87() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(LC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RC)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_45() {
    if (jj_3R_17()) return true;
    return false;
  }

  private bool jj_3R_24() {
    if (jj_3R_26()) return true;
    Token xsp;
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private bool jj_3R_74() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RB)) return true;
    if (jj_scan_token(C)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private bool jj_3R_14() {
    if (jj_3R_26()) return true;
    Token xsp;
    if (jj_3R_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_44() {
    if (jj_3R_56()) return true;
    return false;
  }

  private bool jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  private bool jj_3R_75() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private bool jj_3R_41() {
    if (jj_3R_55()) return true;
    return false;
  }

  private bool jj_3R_43() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private bool jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  private bool jj_3R_72() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private bool jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  private bool jj_3R_42() {
    if (jj_3R_16()) return true;
    return false;
  }

  private bool jj_3_11() {
    if (jj_scan_token(S)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private bool jj_3R_73() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private bool jj_3R_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  private bool jj_3R_10() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    if (jj_scan_token(LP)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RP)) return true;
    if (jj_scan_token(LC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private bool jj_3R_76() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private bool jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private bool jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_39() {
    if (jj_3R_26()) return true;
    return false;
  }

  private bool jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private bool jj_3R_64() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_38() {
    if (jj_3R_14()) return true;
    return false;
  }

  private bool jj_3R_58() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private bool jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  private bool jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private bool jj_3R_63() {
    if (jj_3R_75()) return true;
    return false;
  }

  private bool jj_3R_34() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RB)) return true;
    return false;
  }

  private bool jj_3R_62() {
    if (jj_3R_74()) return true;
    return false;
  }

  private bool jj_3R_47() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_61() {
    if (jj_3R_73()) return true;
    return false;
  }

  private bool jj_3R_60() {
    if (jj_3R_72()) return true;
    return false;
  }

  private bool jj_3R_59() {
    if (jj_3R_71()) return true;
    return false;
  }

  private bool jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_19() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_79() {
    if (jj_scan_token(RTN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private bool jj_3R_55() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private bool jj_3R_50() {
    if (jj_3R_19()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private bool jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  private bool jj_3R_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private bool jj_3R_70() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private bool jj_3R_18() {
    if (jj_3R_23()) return true;
    return false;
  }

  private bool jj_3R_69() {
    if (jj_3R_78()) return true;
    return false;
  }

  private bool jj_3R_56() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private bool jj_3R_30() {
    if (jj_3R_48()) return true;
    return false;
  }

  private bool jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private bool jj_3R_68() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_29() {
    if (jj_3R_18()) return true;
    return false;
  }

  private bool jj_3R_35() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_67() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_66() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private bool jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_65() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_88() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private bool jj_3R_32() {
    if (jj_scan_token(SYMBOLS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private bool jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private bool jj_3R_31() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private bool jj_3R_85() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(LC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  private bool jj_3R_13() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(ASS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private bool jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private bool jj_3R_84() {
    if (jj_3R_87()) return true;
    return false;
  }

  private bool jj_3R_83() {
    if (jj_3R_86()) return true;
    return false;
  }

  private bool jj_3R_82() {
    if (jj_3R_85()) return true;
    return false;
  }

  private bool jj_3R_23() {
    if (jj_scan_token(SID)) return true;
    return false;
  }

  private bool jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    return false;
  }

  private bool jj_3R_15() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private bool jj_3R_33() {
    if (jj_scan_token(BID)) return true;
    return false;
  }

  private bool jj_3R_81() {
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_57() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private bool jj_3R_86() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(LC)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RC)) return true;
    return false;
  }

  private bool jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  private bool jj_3R_80() {
    if (jj_scan_token(ASS)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(SC)) return true;
    return false;
  }

  private bool jj_3R_36() {
    if (jj_3R_52()) return true;
    return false;
  }

  private bool jj_3R_54() {
    if (jj_3R_57()) return true;
    return false;
  }

  private bool jj_3R_12() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(ASS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private bool jj_3R_53() {
    if (jj_3R_17()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private bool jj_3R_22() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private bool jj_3R_77() {
    if (jj_3R_19()) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private bool jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  private bool jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  private bool jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  public TheParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private long jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private long jj_la;
  public bool lookingAhead = false;
  private bool jj_semLA;
  private long jj_gen;
  private long[] jj_la1 = new long[29];
  static private long[] jj_la1_0;
  static private long[] jj_la1_1;
  static TheParser(){
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new long[] {0x80000,0x400000,0x40000000,0x40000000,0x8000,0x80000000,0x14000,0x40000000,0xbf901400,0x20000,0xb3001400,0xb3001400,0x2000000,0x1000400,0x40000,0x40000,0x40000,0x40000,0x40000,0x30001000,0x30001000,0xff901400,0x8900000,0x200000,0x20000,0x40000000,0x1000,0x20000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new long[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0xe0,0x0,0xe0,0xe0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0xe0,0xe0,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  private JJCalls[] jj_2_rtns = new JJCalls[11];
  private bool jj_rescan = false;
  private long jj_gc = 0;

  public TheParser(System.IO.Stream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TheParser(System.IO.TextReader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TheParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TheParser(TheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TheParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind){
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.Length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  class LookaheadSuccess : System.Exception{ }
  private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private bool jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private long jj_init_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private System.Collections.Generic.List<long[]> jj_expentries = new System.Collections.Generic.List<long[]>();
  private long[] jj_expentry;
  private long jj_kind = -1;
  private long[] jj_lasttokens = new long[100];
  private long jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new long[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      bool exists = false;
      foreach(long[] oldentry in jj_expentries) {
        if (oldentry.Length == jj_expentry.Length) {
          exists = true;
          for (int i = 0; i < jj_expentry.Length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.Add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.Clear();
    bool[] la1tokens = new bool[40];
    for (int i = 0; i < 40; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new long[1];
        jj_expentry[0] = i;
        jj_expentries.Add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    long[][] exptokseq = new long[jj_expentries.Count][];
    for (int i = 0; i < jj_expentries.Count; i++) {
      exptokseq[i] = (long[])jj_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  class JJCalls {
    public long gen;
    public Token first;
    public int arg;
    public JJCalls next;
  }

  }


options{ STATIC = false;  }

PARSER_BEGIN(TheParser)

  using System;
  using System.IO;
  using System.Collections.Generic;
  using Leuterper;
  using Leuterper.Constructions;
  using Leuterper.Exceptions;

  class TheParser { }

PARSER_END(TheParser)

public Program parse_Program() :
{
	Program p = new Program();
	UniquesList<LClassTemplate> classes = new UniquesList<LClassTemplate>();
	UniquesList<Function> functions = new UniquesList<Function>();
	List<IAction> actions = new List<IAction>();
}
{
	parse_Classes(classes) parse_Functions(functions) parse_IActions(actions)
	{ p.init(classes, functions, actions); return p; }
}

public Function parse_Function() :
{
	LType type;
	Token id;
	List<Parameter> parameters = new List<Parameter>();
	List<IAction> actions = new List<IAction>();
}
{
	type = parse_LType() id = parse_SID() <LP> parse_Parameters(parameters) <RP>
	<LC> parse_IActions(actions) <RC>
	{ return new Function(id.beginLine, type, id.image, parameters, actions); }
}

public LClassTemplate parse_Class() :
{
	LType type;
	LType declarationInheritance = null;
	UniquesList<LAttribute> LAttributesDeclarations = new UniquesList<LAttribute>();
	UniquesList<Class_Procedure> classProcedures = new UniquesList<Class_Procedure>();
	Token c;
}
{
	c = <CLASS>
	type = parse_LType()
	[declarationInheritance = parse_Inheritance()]
	<LC>
	parse_LAttributes(LAttributesDeclarations)
	parse_Class_Procedures(classProcedures)
	<RC>
	{ return new LClassTemplate(c.beginLine, type, declarationInheritance, LAttributesDeclarations, classProcedures); }
}

public Constructor parse_Constructor() :
{
	Token id;
	List<Parameter> parameters = new List<Parameter>();
	List<Expression> baseCallArguments = new List<Expression>();
	List<IAction> actions = new List<IAction>();
}
{
	id = parse_BID()
	<LP>
	parse_Parameters(parameters)
	<RP>
	[ <C> <LP> parse_Arguments(baseCallArguments) <RP> ]
	<LC>
	parse_IActions(actions)
	<RC>
	{ return new Constructor(id.beginLine, id.image, parameters, baseCallArguments, actions); }
}

public Method parse_Method() :
{
	LType type = null;
	Token id;
	List<Parameter> parameters = new List<Parameter>();
	List<IAction> actions = new List<IAction>();
}
{
	type = parse_LType()
	(	id = parse_SID()
	|	id = <SYMBOLS>
	)
	<LP> parse_Parameters(parameters) <RP>
	<LC> parse_IActions(actions) <RC>
	{ return new Method(id.beginLine, type, id.image, parameters, actions); }
}

public LType parse_Inheritance() :
	{ LType type; }
{
	<INH> type = parse_LType()
	{ return type; }
}

public LAttribute parse_LAttribute() :
{
	LType type;
	Token id;
	Expression expression;
}
{
	type = parse_LType()
	id = parse_SID()
	<SC>
	{ return new LAttribute(id.beginLine, type, id.image); }
}

public Var parse_Var() :
{
	LType type;
	Token id;
	Expression expression;
}
{
	type = parse_LType()
	id = parse_SID()
	(
		(
			<ASS>
			expression = parse_Expression()
			{ return new Var(id.beginLine, type, id.image, expression); }
		)
		|
		{ return new Var(id.beginLine, type, id.image); }
	)
}

public Token parse_BID() :
	{ Token id; }
	{ id = <BID> { return id; } }

public Token parse_SID() :
	{ Token id; }
	{ id = <SID> { return id; }}

public Assignment parse_Assignment() :
{
	VarAccess lhs;
	Expression rhs;
	Token ass;
}
{
	lhs = parse_VarAccess()
	ass = <ASS>
	rhs = parse_Expression()
	{ return new Assignment(ass.beginLine, lhs, rhs); }
}

public IAction parse_IAction() :
{
	IAction action;
}
{
	(
			action = parse_Var() <SC>
		|	LOOKAHEAD(parse_LSet())
			(	action = parse_LSet() <SC> )
		|	LOOKAHEAD(parse_Assignment())
			(	action = parse_Assignment() <SC> )
		|	(	action = parse_Expression() <SC> )
		|	(	action = parse_Conditional() )
		|	(	action = parse_Return_From_Block() <SC> )
	)
	{ return action; }
}

public Return_From_Block parse_Return_From_Block() :
{
	Expression returningExpression;
	Token rtn;
}
{
	rtn = <RTN>
	returningExpression = parse_Expression()
	{ return new Return_From_Block(rtn.beginLine, returningExpression); }
}

public Expression parse_Expression() :
	{ Expression result; }
{
	(
		LOOKAHEAD(parse_CExpression())
		result = parse_CExpression()
		|
		result = parse_GExpression()
	)
	{ return result; }
}

public Expression parse_GExpression() :
	{ Expression expression; }
{
	(	LOOKAHEAD(parse_Call_Function())
		expression = parse_Call_Function()
	|	expression = parse_Call_Constructor()
	|	LOOKAHEAD(parse_Term())
		expression = parse_Term()
	|	( <LP> expression = parse_Expression() <RP>	)
	|	expression = parse_Null()
	)
	{ return expression; }
}

public Expression parse_CExpression() :
	{ Expression ground; }
{
	ground = parse_GExpression()
	(
		(
			LOOKAHEAD(parse_Call_Method(ground))
			ground = parse_Call_Method(ground)
			|
			ground = parse_LAttributeAccess(ground)
		)
	)+
	{ return ground; }
}

public LAttributeAccess parse_AAExpression() :
	{ Expression ground; }
{
	ground = parse_GExpression()
	(
		(
			LOOKAHEAD(parse_Call_Method(ground))
			(
				ground = parse_Call_Method(ground)
				ground = parse_LAttributeAccess(ground)
			)
			|
			ground = parse_LAttributeAccess(ground)
		)
	)+
	{ return (LAttributeAccess) ground; }
}

public LSet parse_LSet() :
{
	LAttributeAccess lhs;
	Expression rhs;
}
{
	lhs = parse_AAExpression()
	<ASS>
	rhs = parse_Expression()
	{ return new LSet(lhs.getLine(), lhs, rhs); }
}

public LAttributeAccess parse_LAttributeAccess(Expression theObject) :
	{ Token LAttributeName; }
{
	<DOT>
	LAttributeName = parse_SID() {  return new LAttributeAccess(LAttributeName.beginLine, theObject, LAttributeName.image); }
}

public Call_Function parse_Call_Function() :
{
	Token id;
	List<Expression> arguments = new List<Expression>();
}
{
	id = parse_SID()
	<LP>
	parse_Arguments(arguments)
	<RP>

	{ return new Call_Function(id.beginLine, id.image, arguments); }
}

public Call_Method parse_Call_Method(Expression theObject) :
{
	Token methodId;
	List<Expression> arguments = new List<Expression>();
	Expression expression;
}
{
	(
		(
			<DOT>
			methodId = parse_SID()
			<LP>
			parse_Arguments(arguments)
			<RP>
		)
		|
		(
			methodId = <SYMBOLS>
			expression = parse_Expression() { arguments.Add(expression); }
		)
	)

	{ return new Call_Method(methodId.beginLine, theObject, methodId.image, arguments); }
}

public Expression parse_Term() :
{ Expression term; }
{
	(	LOOKAHEAD(parse_VarAccess())
		term = parse_VarAccess()
	|	term = parse_LObject()
	)
	{ return term; }
}

public VarAccess parse_VarAccess() :
	{ Token id; }
	{ id = parse_SID() { return new VarAccess(id.beginLine, id.image); } }

public Call_Constructor parse_Call_Constructor() :
{
	LType type;
	List<Expression> arguments = new List<Expression>();
}
{
	<NEW>
	type = parse_LType()
	<LP>
	parse_Arguments(arguments)
	<RP>
	{ return new Call_Constructor(type.getLine(), type, arguments); }
}

public void parse_LObjects(List<LObject> objects) :
{
	LObject theObject;
}
{
	[
		theObject = parse_LObject() { objects.Add(theObject); }
		( <COMMA> theObject = parse_LObject() { objects.Add(theObject); } )*
	]
}

public LObject parse_LObject() :
	{ LObject theObject; }
{
	(	theObject = parse_LNumber()
	|	theObject = parse_LString()
	|	theObject = parse_LChar()
	|	theObject = parse_LList()
	|	theObject = parse_LBoolean()
	)
	{ return theObject; }
}

public LNumber parse_LNumber() :
{
	Token theNumber;
	Token sign = null;
}
{
	[
		sign = <SYMBOLS>
	]
	theNumber = <NUMBER> { return new LNumber(theNumber.beginLine, sign, theNumber.image); }
}

public LChar parse_LChar() :
	{ Token aChar; }
{
	aChar = <CHAR> { return new LChar(aChar.beginLine, aChar.image); }
}

public LString parse_LString() :
	{ Token aString; }
{
	aString = <STRING> { return new LString(aString.beginLine, aString.image); }
}

public LBoolean parse_LBoolean() :
	{ Token boolean; }
{
	boolean = <BOOL> { return new LBoolean(boolean.beginLine, boolean.image); }
}

public LList parse_LList() :
{
	LType type;
	List<Expression> elements = new List<Expression>() ;
	Token lc;
}
{
	lc = <LC> parse_Arguments(elements) <RC> <C> type = parse_LType()
	{ return new LList(lc.beginLine, type, elements); }
}

public Loop_Do_While parse_Loop_Do_While() :
{
	List<IAction> actions = new List<IAction>();
	Expression expression;
	Token ldo;
}
{
	ldo = <DO>
	<LC> parse_IActions(actions) <RC>
	<WHILE> expression = parse_Expression() <SC>
	{ return new Loop_Do_While(ldo.beginLine, expression, actions); }
}

public Loop_While parse_Loop_While() :
{
	Expression expression;
	List<IAction> actions = new List<IAction>();
	Token lwhile;
}
{
	lwhile = <WHILE>
	expression = parse_Expression()
	<LC>
	parse_IActions(actions)
	<RC>
	{ return new Loop_While(lwhile.beginLine, expression, actions); }
}

public Conditional parse_Conditional() :
	{ Conditional conditional; }
{
	( conditional = parse_If_Then_Else()
	| conditional = parse_Loop_While()
	| conditional = parse_Loop_Do_While()
	)
	{ return conditional; }
}

public If_Then_Else parse_If_Then_Else() :
{
	Expression expression;
	List<IAction> thenIActions = new List<IAction>();
	List<IAction> elseIActions = new List<IAction>();
	Token lif;
}
{
	lif = <IF>
	expression = parse_Expression()
	<LC> parse_IActions(thenIActions) <RC>
	[ <ELSE> <LC> parse_IActions(elseIActions) <RC> ]
	{ return new If_Then_Else(lif.beginLine, expression, thenIActions, elseIActions); }
}

public LVoid parse_Null() :
	{ Token lnull; }
	{ lnull = <NULL> { return new LVoid(lnull.beginLine); } }

public Parameter parse_Parameter() :
{
	LType type;
	Token id;
}
{
	type = parse_LType()
	id = parse_SID()
	{ return new Parameter(id.beginLine, type, id.image); }	
}

public LType parse_LType() :
{
	Token id;
	List<LType> typeVariables = new List<LType>();
}
{
	id = parse_BID()
	[ <LB> parse_LTypes(typeVariables) <RB> ]
	{ return new LType(id.beginLine, id.image, typeVariables); }
}

public void parse_LTypes(List<LType> types) :
	{ LType type; }
{
	[
		type = parse_LType() { types.Add(type); }
		( <COMMA> type = parse_LType() { types.Add(type); } )*
	]
}

public void parse_Class_Procedures(UniquesList<Class_Procedure> classProcedures) :
{
	Class_Procedure classProcedure;
}
{
	(
		LOOKAHEAD(parse_Method())
		classProcedure = parse_Method() { classProcedures.AddUnique(classProcedure); }
		|
		classProcedure = parse_Constructor() { classProcedures.AddUnique(classProcedure); }
	)*
}

public void parse_Arguments(List<Expression> arguments) :
	{ Expression expression; }
{
	[
		expression = parse_Expression() { arguments.Add(expression); }
		( <COMMA> expression = parse_Expression() { arguments.Add(expression); } )*
	]
}

public void parse_Parameters(List<Parameter> parameters) :
	{ Parameter parameter; }
{
	[	parameter = parse_Parameter() { parameters.Add(parameter); }
		( <COMMA> parameter = parse_Parameter() { parameters.Add(parameter); } )*
	]
}

public void parse_Classes(UniquesList<LClassTemplate> classes) :
	{ LClassTemplate aClass; }
	{ ( aClass = parse_Class() { classes.AddUnique(aClass); } )* }

public void parse_Functions(UniquesList<Function> functions) :
{ Function f; }
{
	(
		LOOKAHEAD(parse_Function())
		f = parse_Function() { functions.AddUnique(f); }
	)*
}

public void parse_IActions(List<IAction> actions) :
	{ IAction action; }
	{ ( action = parse_IAction() { actions.Add(action); } )* }

public void parse_LAttributes(UniquesList<LAttribute> attributes) :
	{ LAttribute lAttribute; }
{ 
	( 
		LOOKAHEAD(parse_LAttribute())
		lAttribute = parse_LAttribute() { attributes.AddUnique(lAttribute); }
	)*
}

// Lexer Definitions
SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" }
SKIP : { <"//" (~["\n","\r"])* ("\n" | "\r\n")> }
SKIP : { <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">}

TOKEN :
{
	<LC:"{">	| <RC: "}">	| <LP: "(">	| <RP: ")">	| <LB: "[">	| <RB: "]">  | <CLASS: "class"> |
	<ASS: "=">	| <C: ":">	| <SC: ";"> | <DOT: ".">|<DO: "do"> | <IF: "if"> | <COMMA: ",">		|
	<ELSE: "else">	| <NULL: "null"> | <INH: "inherits"> | <NEW: "new"> | <RTN: "return">		|
	<WHILE: "while">| <BOOL: ("true" | "false")> | <NUMBER: (<D>)+ ("\\."(<D>)*)? >
}

TOKEN :
{
	<BID: <BL>(<L>|<D>)*>
	|
	<SID: <SL>(<L>|<D>)* >
	|
	< SYMBOLS: (<S>)+ >
}

TOKEN :
{
	<D: ["0"-"9"]>
	|
	<L: ["a"-"z","A"-"Z","_"]>
	|
	<BL: ["A"-"Z"]>
	|
	<SL: ["a"-"z"]>
	|
	<S: "==" | "=" | "+" | "-" | "*" | "/" | "!" | "#" | "%" | "&" | "?" | "|" | "<" | ">" >
	|
	<CHAR: "'" ( ("\\" ~[]) | ( ~["'"] )) "'">
	|
	<STRING: "\"" ("\\" ~[] | (~["\""]) )* "\"" >
}
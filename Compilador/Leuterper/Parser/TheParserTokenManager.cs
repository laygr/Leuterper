/* Generated By: CSCC: 4.0 (03/25/2012)  Do not edit this line. TheParserTokenManager.cs */
using System;
using System.IO;
using System.Collections.Generic;
using Leuterper;
using Leuterper.Constructions;
using Leuterper.Exceptions;

public class TheParserTokenManager : TheParserConstants
{
  public  System.IO.TextWriter debugStream = new System.IO.StreamWriter(System.Console.OpenStandardError());
  public  void setDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
            return 43;
         if ((active0 & 0xfd84000L) != 0L)
         {
            jjmatchedKind = 31;
            return 38;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000L) != 0L)
            return 38;
         if ((active0 & 0xfc04000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 38;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000L) != 0L)
            return 38;
         if ((active0 & 0xdc04000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0xc00000L) != 0L)
            return 38;
         if ((active0 & 0xd004000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0x8004000L) != 0L)
            return 38;
         if ((active0 & 0x5000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 38;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 38;
         return -1;
      case 6:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 38;
         }
         return -1;
      default :
         return -1;
   }
}
private int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch((int)curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 44:
         return jjStopAtPos(0, 21);
      case 46:
         return jjStopAtPos(0, 18);
      case 58:
         return jjStopAtPos(0, 16);
      case 59:
         return jjStopAtPos(0, 17);
      case 61:
         return jjStartNfaWithStates_0(0, 15, 43);
      case 91:
         return jjStopAtPos(0, 12);
      case 93:
         return jjStopAtPos(0, 13);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1100000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2800000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 123:
         return jjStopAtPos(0, 8);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch((int)curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 38);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 38);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch((int)curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 119:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch((int)curChar)
   {
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 38);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch((int)curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 38);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch((int)curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch((int)curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(System.IO.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch((int)curChar)
   {
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static ulong[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         ulong l = 1UL << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0xf000ac6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  if (curChar == 61)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  if (curChar == 61)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  if (curChar == 61)
                     jjCheckNAdd(40);
                  break;
               case 3:
                  if ((0xf000ac6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddTwoStates(31, 34);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  if (curChar == 61)
                     jjCheckNAddTwoStates(40, 43);
                  else if (curChar == 47)
                     jjAddStates(5, 6);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  jjCheckNAddStates(0, 2);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 19:
                  if (curChar == 47)
                     jjAddStates(5, 6);
                  break;
               case 20:
                  if (curChar == 47)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
               case 23:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 24:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 26:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 42)
                     jjAddStates(10, 11);
                  break;
               case 28:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 27);
                  break;
               case 29:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 27);
                  break;
               case 30:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(31, 34);
                  break;
               case 32:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(40, 43);
                  break;
               case 40:
                  if (curChar != 61)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if (curChar == 61)
                     jjCheckNAdd(40);
                  break;
               case 42:
                  if ((0xf000ac6a00000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         ulong l = 1UL << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 42:
                  if (curChar != 124)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(38);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 1:
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
               case 13:
                  jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
               case 17:
                  jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  jjAddStates(7, 9);
                  break;
               case 26:
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
               case 29:
                  jjCheckNAddTwoStates(29, 27);
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         ulong l2 = 1UL << (curChar & 0x3F);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 16:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(29, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(System.IO.IOException e) { return curPos; }
   }
}
static int[] jjnextStates = {
   15, 17, 18, 10, 13, 20, 25, 21, 22, 24, 28, 30, 
};
public static String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\x7b", "\x7d", "\x28", "\x29", 
"\x5b", "\x5d", "\x63\x6c\x61\x73\x73", "\x3d", "\x3a", "\x3b", "\x2e", "\x64\x6f", 
"\x69\x66", "\x2c", "\x65\x6c\x73\x65", "\x6e\x75\x6c\x6c", 
"\x69\x6e\x68\x65\x72\x69\x74\x73", "\x6e\x65\x77", "\x72\x65\x74\x75\x72\x6e", "\x77\x68\x69\x6c\x65", null, null, 
null, null, null, null, null, null, null, null, null, null, };
public static String[] lexStateNames = {
   "DEFAULT", 
};
static long[] jjtoToken = {
   0xffffffff01L, 
};
static long[] jjtoSkip = {
   0xfeL, 
};
protected SimpleCharStream input_stream;
private long[] jjrounds = new long[44];
private int[] jjstateSet = new int[88];
protected char curChar;
public TheParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Exception("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TheParserTokenManager(SimpleCharStream stream, int lexState) : this(stream){
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken(){
   String im = jjstrLiteralImages[jjmatchedKind];
   String curTokenIm;
   int beginLine;
   int beginColumn;
   int endLine;
   int endColumn;
   curTokenIm = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();

   Token t = Token.newToken(jjmatchedKind, curTokenIm);
   t.beginLine = beginLine;
   t.beginColumn = beginColumn;
   t.endLine = endLine;
   t.endColumn = endColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
long jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;){
   try{     
      curChar = input_stream.BeginToken();
   }catch(System.IO.IOException e){
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (System.IO.IOException e1) { goto EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff){
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if (((ulong)jjtoToken[jjmatchedKind >> 6] & (1UL << (jjmatchedKind & 0x3F))) != 0){
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         goto EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   bool EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (System.IO.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
